
STM32F0 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800064c  0800064c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000650  08000650  00010650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000654  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000004  08000658  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000028  08000658  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000686  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000256  00000000  00000000  000206b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000000a8  00000000  00000000  00020908  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000209b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000004c0  00000000  00000000  00020a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000311  00000000  00000000  00020ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00021201  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000170  00000000  00000000  00021280  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000213f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000634 	.word	0x08000634

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000634 	.word	0x08000634

08000108 <main>:

//====================================================================
// MAIN FUNCTION
//====================================================================
int main (void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	initGPIO();
 800010c:	f000 f804 	bl	8000118 <initGPIO>
	for(;;){
		checkPB();
 8000110:	f000 f89e 	bl	8000250 <checkPB>
 8000114:	e7fc      	b.n	8000110 <main+0x8>
	...

08000118 <initGPIO>:



}
// End of main
void initGPIO(void){
 8000118:	b580      	push	{r7, lr}
 800011a:	af00      	add	r7, sp, #0
	RCC -> AHBENR |= RCC_AHBENR_GPIOBEN; //enabling clock for GPIOB
 800011c:	4b3c      	ldr	r3, [pc, #240]	; (8000210 <initGPIO+0xf8>)
 800011e:	4a3c      	ldr	r2, [pc, #240]	; (8000210 <initGPIO+0xf8>)
 8000120:	6952      	ldr	r2, [r2, #20]
 8000122:	2180      	movs	r1, #128	; 0x80
 8000124:	02c9      	lsls	r1, r1, #11
 8000126:	430a      	orrs	r2, r1
 8000128:	615a      	str	r2, [r3, #20]

    // Clear mode register for the PB0-PB7
	GPIOB ->MODER &=~ (GPIO_MODER_MODER0|GPIO_MODER_MODER1|GPIO_MODER_MODER2|GPIO_MODER_MODER3|GPIO_MODER_MODER4|GPIO_MODER_MODER5|GPIO_MODER_MODER6|GPIO_MODER_MODER7);
 800012a:	4b3a      	ldr	r3, [pc, #232]	; (8000214 <initGPIO+0xfc>)
 800012c:	4a39      	ldr	r2, [pc, #228]	; (8000214 <initGPIO+0xfc>)
 800012e:	6812      	ldr	r2, [r2, #0]
 8000130:	0c12      	lsrs	r2, r2, #16
 8000132:	0412      	lsls	r2, r2, #16
 8000134:	601a      	str	r2, [r3, #0]

	//Set PB0-PB7 to as output
	GPIOB ->MODER |= (GPIO_MODER_MODER0_0);
 8000136:	4b37      	ldr	r3, [pc, #220]	; (8000214 <initGPIO+0xfc>)
 8000138:	4a36      	ldr	r2, [pc, #216]	; (8000214 <initGPIO+0xfc>)
 800013a:	6812      	ldr	r2, [r2, #0]
 800013c:	2101      	movs	r1, #1
 800013e:	430a      	orrs	r2, r1
 8000140:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER1_0);
 8000142:	4b34      	ldr	r3, [pc, #208]	; (8000214 <initGPIO+0xfc>)
 8000144:	4a33      	ldr	r2, [pc, #204]	; (8000214 <initGPIO+0xfc>)
 8000146:	6812      	ldr	r2, [r2, #0]
 8000148:	2104      	movs	r1, #4
 800014a:	430a      	orrs	r2, r1
 800014c:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER2_0);
 800014e:	4b31      	ldr	r3, [pc, #196]	; (8000214 <initGPIO+0xfc>)
 8000150:	4a30      	ldr	r2, [pc, #192]	; (8000214 <initGPIO+0xfc>)
 8000152:	6812      	ldr	r2, [r2, #0]
 8000154:	2110      	movs	r1, #16
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER3_0);
 800015a:	4b2e      	ldr	r3, [pc, #184]	; (8000214 <initGPIO+0xfc>)
 800015c:	4a2d      	ldr	r2, [pc, #180]	; (8000214 <initGPIO+0xfc>)
 800015e:	6812      	ldr	r2, [r2, #0]
 8000160:	2140      	movs	r1, #64	; 0x40
 8000162:	430a      	orrs	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER4_0);
 8000166:	4b2b      	ldr	r3, [pc, #172]	; (8000214 <initGPIO+0xfc>)
 8000168:	4a2a      	ldr	r2, [pc, #168]	; (8000214 <initGPIO+0xfc>)
 800016a:	6812      	ldr	r2, [r2, #0]
 800016c:	2180      	movs	r1, #128	; 0x80
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	430a      	orrs	r2, r1
 8000172:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER5_0);
 8000174:	4b27      	ldr	r3, [pc, #156]	; (8000214 <initGPIO+0xfc>)
 8000176:	4a27      	ldr	r2, [pc, #156]	; (8000214 <initGPIO+0xfc>)
 8000178:	6812      	ldr	r2, [r2, #0]
 800017a:	2180      	movs	r1, #128	; 0x80
 800017c:	00c9      	lsls	r1, r1, #3
 800017e:	430a      	orrs	r2, r1
 8000180:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER6_0);
 8000182:	4b24      	ldr	r3, [pc, #144]	; (8000214 <initGPIO+0xfc>)
 8000184:	4a23      	ldr	r2, [pc, #140]	; (8000214 <initGPIO+0xfc>)
 8000186:	6812      	ldr	r2, [r2, #0]
 8000188:	2180      	movs	r1, #128	; 0x80
 800018a:	0149      	lsls	r1, r1, #5
 800018c:	430a      	orrs	r2, r1
 800018e:	601a      	str	r2, [r3, #0]
	GPIOB ->MODER |= (GPIO_MODER_MODER7_0);
 8000190:	4b20      	ldr	r3, [pc, #128]	; (8000214 <initGPIO+0xfc>)
 8000192:	4a20      	ldr	r2, [pc, #128]	; (8000214 <initGPIO+0xfc>)
 8000194:	6812      	ldr	r2, [r2, #0]
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	01c9      	lsls	r1, r1, #7
 800019a:	430a      	orrs	r2, r1
 800019c:	601a      	str	r2, [r3, #0]

	//Turn off LEDS(D0-D7)
	GPIOB->ODR &= ~(GPIO_ODR_0|GPIO_ODR_1|GPIO_ODR_2|GPIO_ODR_3|GPIO_ODR_4|GPIO_ODR_5|GPIO_ODR_6|GPIO_ODR_7);
 800019e:	4b1d      	ldr	r3, [pc, #116]	; (8000214 <initGPIO+0xfc>)
 80001a0:	4a1c      	ldr	r2, [pc, #112]	; (8000214 <initGPIO+0xfc>)
 80001a2:	6952      	ldr	r2, [r2, #20]
 80001a4:	21ff      	movs	r1, #255	; 0xff
 80001a6:	438a      	bics	r2, r1
 80001a8:	615a      	str	r2, [r3, #20]

	RCC -> AHBENR |= RCC_AHBENR_GPIOAEN; // enabling clock for GPIOA
 80001aa:	4b19      	ldr	r3, [pc, #100]	; (8000210 <initGPIO+0xf8>)
 80001ac:	4a18      	ldr	r2, [pc, #96]	; (8000210 <initGPIO+0xf8>)
 80001ae:	6952      	ldr	r2, [r2, #20]
 80001b0:	2180      	movs	r1, #128	; 0x80
 80001b2:	0289      	lsls	r1, r1, #10
 80001b4:	430a      	orrs	r2, r1
 80001b6:	615a      	str	r2, [r3, #20]
	//Set PA0-PA3 as to input
	GPIOA ->MODER &=~ (GPIO_MODER_MODER0|GPIO_MODER_MODER1|GPIO_MODER_MODER2|GPIO_MODER_MODER3);
 80001b8:	2390      	movs	r3, #144	; 0x90
 80001ba:	05db      	lsls	r3, r3, #23
 80001bc:	2290      	movs	r2, #144	; 0x90
 80001be:	05d2      	lsls	r2, r2, #23
 80001c0:	6812      	ldr	r2, [r2, #0]
 80001c2:	21ff      	movs	r1, #255	; 0xff
 80001c4:	438a      	bics	r2, r1
 80001c6:	601a      	str	r2, [r3, #0]

	//Enable pull up resistor for PA0-PA3
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR0_0;
 80001c8:	2390      	movs	r3, #144	; 0x90
 80001ca:	05db      	lsls	r3, r3, #23
 80001cc:	2290      	movs	r2, #144	; 0x90
 80001ce:	05d2      	lsls	r2, r2, #23
 80001d0:	68d2      	ldr	r2, [r2, #12]
 80001d2:	2101      	movs	r1, #1
 80001d4:	430a      	orrs	r2, r1
 80001d6:	60da      	str	r2, [r3, #12]
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR1_0;
 80001d8:	2390      	movs	r3, #144	; 0x90
 80001da:	05db      	lsls	r3, r3, #23
 80001dc:	2290      	movs	r2, #144	; 0x90
 80001de:	05d2      	lsls	r2, r2, #23
 80001e0:	68d2      	ldr	r2, [r2, #12]
 80001e2:	2104      	movs	r1, #4
 80001e4:	430a      	orrs	r2, r1
 80001e6:	60da      	str	r2, [r3, #12]
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR2_0;
 80001e8:	2390      	movs	r3, #144	; 0x90
 80001ea:	05db      	lsls	r3, r3, #23
 80001ec:	2290      	movs	r2, #144	; 0x90
 80001ee:	05d2      	lsls	r2, r2, #23
 80001f0:	68d2      	ldr	r2, [r2, #12]
 80001f2:	2110      	movs	r1, #16
 80001f4:	430a      	orrs	r2, r1
 80001f6:	60da      	str	r2, [r3, #12]
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPDR3_0;
 80001f8:	2390      	movs	r3, #144	; 0x90
 80001fa:	05db      	lsls	r3, r3, #23
 80001fc:	2290      	movs	r2, #144	; 0x90
 80001fe:	05d2      	lsls	r2, r2, #23
 8000200:	68d2      	ldr	r2, [r2, #12]
 8000202:	2140      	movs	r1, #64	; 0x40
 8000204:	430a      	orrs	r2, r1
 8000206:	60da      	str	r2, [r3, #12]

}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	40021000 	.word	0x40021000
 8000214:	48000400 	.word	0x48000400

08000218 <delay>:
//====================================================================
// FUNCTION DEFINITIONS
//====================================================================
void delay(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	volatile int i,j;
	for(i=0;i<=13;i++){
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e00c      	b.n	800023e <delay+0x26>
		for(j=0;j<=65535;j++);
 8000224:	2300      	movs	r3, #0
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	e002      	b.n	8000230 <delay+0x18>
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	603b      	str	r3, [r7, #0]
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	4a06      	ldr	r2, [pc, #24]	; (800024c <delay+0x34>)
 8000234:	4293      	cmp	r3, r2
 8000236:	ddf8      	ble.n	800022a <delay+0x12>
	for(i=0;i<=13;i++){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b0d      	cmp	r3, #13
 8000242:	ddef      	ble.n	8000224 <delay+0xc>
	}
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	0000ffff 	.word	0x0000ffff

08000250 <checkPB>:
void checkPB(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if((GPIOA->IDR & GPIO_IDR_0)==0){
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	691b      	ldr	r3, [r3, #16]
 800025a:	2201      	movs	r2, #1
 800025c:	4013      	ands	r3, r2
 800025e:	d10c      	bne.n	800027a <checkPB+0x2a>
		startFlag = 1;
 8000260:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <checkPB+0xa8>)
 8000262:	2201      	movs	r2, #1
 8000264:	701a      	strb	r2, [r3, #0]
		firstFlag =0;
 8000266:	4b25      	ldr	r3, [pc, #148]	; (80002fc <checkPB+0xac>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
		secondFlag =0;
 800026c:	4b24      	ldr	r3, [pc, #144]	; (8000300 <checkPB+0xb0>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
		thirdFlag =0;
 8000272:	4b24      	ldr	r3, [pc, #144]	; (8000304 <checkPB+0xb4>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	e039      	b.n	80002ee <checkPB+0x9e>


	}
	else if((GPIOA->IDR & GPIO_IDR_1)==0){
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	691b      	ldr	r3, [r3, #16]
 8000280:	2202      	movs	r2, #2
 8000282:	4013      	ands	r3, r2
 8000284:	d10e      	bne.n	80002a4 <checkPB+0x54>
		startFlag = 1;
 8000286:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <checkPB+0xa8>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
		firstFlag =1;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <checkPB+0xac>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
		secondFlag =0;
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <checkPB+0xb0>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		thirdFlag =0;
 8000298:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <checkPB+0xb4>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
		display();
 800029e:	f000 f833 	bl	8000308 <display>
 80002a2:	e024      	b.n	80002ee <checkPB+0x9e>
	}
	else if((GPIOA->IDR & GPIO_IDR_2)==0){
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	691b      	ldr	r3, [r3, #16]
 80002aa:	2204      	movs	r2, #4
 80002ac:	4013      	ands	r3, r2
 80002ae:	d10c      	bne.n	80002ca <checkPB+0x7a>
		startFlag = 1;
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <checkPB+0xa8>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
		firstFlag =0;
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <checkPB+0xac>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
		secondFlag =1;
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <checkPB+0xb0>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
		thirdFlag =0;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <checkPB+0xb4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
 80002c8:	e011      	b.n	80002ee <checkPB+0x9e>

	}
	else if((GPIOA->IDR & GPIO_IDR_3)==0){
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	2208      	movs	r2, #8
 80002d2:	4013      	ands	r3, r2
 80002d4:	d10b      	bne.n	80002ee <checkPB+0x9e>
		startFlag = 1;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <checkPB+0xa8>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		firstFlag =0;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <checkPB+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
		secondFlag =0;
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <checkPB+0xb0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
		thirdFlag =1;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <checkPB+0xb4>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]

	}
	display();
 80002ee:	f000 f80b 	bl	8000308 <display>

}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000021 	.word	0x20000021
 80002fc:	20000022 	.word	0x20000022
 8000300:	20000023 	.word	0x20000023
 8000304:	20000024 	.word	0x20000024

08000308 <display>:

void display(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(startFlag==1){
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <display+0x68>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d10b      	bne.n	800032c <display+0x24>
		GPIOB->ODR &= ~(GPIO_ODR_0|GPIO_ODR_1|GPIO_ODR_2|GPIO_ODR_3|GPIO_ODR_4|GPIO_ODR_5|GPIO_ODR_6|GPIO_ODR_7);
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <display+0x6c>)
 8000316:	4a17      	ldr	r2, [pc, #92]	; (8000374 <display+0x6c>)
 8000318:	6952      	ldr	r2, [r2, #20]
 800031a:	21ff      	movs	r1, #255	; 0xff
 800031c:	438a      	bics	r2, r1
 800031e:	615a      	str	r2, [r3, #20]
		GPIOB->ODR|= GPIO_ODR_0;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <display+0x6c>)
 8000322:	4a14      	ldr	r2, [pc, #80]	; (8000374 <display+0x6c>)
 8000324:	6952      	ldr	r2, [r2, #20]
 8000326:	2101      	movs	r1, #1
 8000328:	430a      	orrs	r2, r1
 800032a:	615a      	str	r2, [r3, #20]

	}
	if(startFlag==1 && firstFlag==1 ){
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <display+0x68>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d105      	bne.n	8000340 <display+0x38>
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <display+0x70>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d101      	bne.n	8000340 <display+0x38>
		firstDisplay();
 800033c:	f000 f822 	bl	8000384 <firstDisplay>
	}

	if(startFlag==1 && secondFlag==1 ){
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <display+0x68>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d105      	bne.n	8000354 <display+0x4c>
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <display+0x74>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <display+0x4c>
		secondDisplay();
 8000350:	f000 f83e 	bl	80003d0 <secondDisplay>
	}

	if(startFlag==1 && thirdFlag==1 ){
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <display+0x68>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d105      	bne.n	8000368 <display+0x60>
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <display+0x78>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d101      	bne.n	8000368 <display+0x60>
		thirdDisplay();
 8000364:	f000 f8b2 	bl	80004cc <thirdDisplay>
	}

}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	20000021 	.word	0x20000021
 8000374:	48000400 	.word	0x48000400
 8000378:	20000022 	.word	0x20000022
 800037c:	20000023 	.word	0x20000023
 8000380:	20000024 	.word	0x20000024

08000384 <firstDisplay>:

void firstDisplay(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	GPIOB->ODR &= ~(GPIO_ODR_0|GPIO_ODR_1|GPIO_ODR_2|GPIO_ODR_3|GPIO_ODR_4|GPIO_ODR_5|GPIO_ODR_6|GPIO_ODR_7);
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <firstDisplay+0x3c>)
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <firstDisplay+0x3c>)
 800038c:	6952      	ldr	r2, [r2, #20]
 800038e:	21ff      	movs	r1, #255	; 0xff
 8000390:	438a      	bics	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = bitpattern1;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <firstDisplay+0x3c>)
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <firstDisplay+0x40>)
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	615a      	str	r2, [r3, #20]
	delay();
 800039c:	f7ff ff3c 	bl	8000218 <delay>
	GPIOB->ODR = bitpattern2;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <firstDisplay+0x3c>)
 80003a2:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <firstDisplay+0x44>)
 80003a4:	7812      	ldrb	r2, [r2, #0]
 80003a6:	615a      	str	r2, [r3, #20]
	delay();
 80003a8:	f7ff ff36 	bl	8000218 <delay>
	GPIOB->ODR = bitpattern3;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <firstDisplay+0x3c>)
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <firstDisplay+0x48>)
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	615a      	str	r2, [r3, #20]
	delay();
 80003b4:	f7ff ff30 	bl	8000218 <delay>

}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	48000400 	.word	0x48000400
 80003c4:	20000020 	.word	0x20000020
 80003c8:	20000000 	.word	0x20000000
 80003cc:	20000001 	.word	0x20000001

080003d0 <secondDisplay>:

void secondDisplay(void){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_0|GPIO_ODR_1|GPIO_ODR_2|GPIO_ODR_3|GPIO_ODR_4|GPIO_ODR_5|GPIO_ODR_6|GPIO_ODR_7);
 80003d4:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <secondDisplay+0xf8>)
 80003d6:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <secondDisplay+0xf8>)
 80003d8:	6952      	ldr	r2, [r2, #20]
 80003da:	21ff      	movs	r1, #255	; 0xff
 80003dc:	438a      	bics	r2, r1
 80003de:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= (GPIO_ODR_0);
 80003e0:	4b39      	ldr	r3, [pc, #228]	; (80004c8 <secondDisplay+0xf8>)
 80003e2:	4a39      	ldr	r2, [pc, #228]	; (80004c8 <secondDisplay+0xf8>)
 80003e4:	6952      	ldr	r2, [r2, #20]
 80003e6:	2101      	movs	r1, #1
 80003e8:	430a      	orrs	r2, r1
 80003ea:	615a      	str	r2, [r3, #20]
	delay();
 80003ec:	f7ff ff14 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_0);
 80003f0:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <secondDisplay+0xf8>)
 80003f2:	4a35      	ldr	r2, [pc, #212]	; (80004c8 <secondDisplay+0xf8>)
 80003f4:	6952      	ldr	r2, [r2, #20]
 80003f6:	2101      	movs	r1, #1
 80003f8:	438a      	bics	r2, r1
 80003fa:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_1;
 80003fc:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <secondDisplay+0xf8>)
 80003fe:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <secondDisplay+0xf8>)
 8000400:	6952      	ldr	r2, [r2, #20]
 8000402:	2102      	movs	r1, #2
 8000404:	430a      	orrs	r2, r1
 8000406:	615a      	str	r2, [r3, #20]
	delay();
 8000408:	f7ff ff06 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_1);
 800040c:	4b2e      	ldr	r3, [pc, #184]	; (80004c8 <secondDisplay+0xf8>)
 800040e:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <secondDisplay+0xf8>)
 8000410:	6952      	ldr	r2, [r2, #20]
 8000412:	2102      	movs	r1, #2
 8000414:	438a      	bics	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_2;
 8000418:	4b2b      	ldr	r3, [pc, #172]	; (80004c8 <secondDisplay+0xf8>)
 800041a:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <secondDisplay+0xf8>)
 800041c:	6952      	ldr	r2, [r2, #20]
 800041e:	2104      	movs	r1, #4
 8000420:	430a      	orrs	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
	delay();
 8000424:	f7ff fef8 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_2);
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <secondDisplay+0xf8>)
 800042a:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <secondDisplay+0xf8>)
 800042c:	6952      	ldr	r2, [r2, #20]
 800042e:	2104      	movs	r1, #4
 8000430:	438a      	bics	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_3;
 8000434:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <secondDisplay+0xf8>)
 8000436:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <secondDisplay+0xf8>)
 8000438:	6952      	ldr	r2, [r2, #20]
 800043a:	2108      	movs	r1, #8
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
	delay();
 8000440:	f7ff feea 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_3);
 8000444:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <secondDisplay+0xf8>)
 8000446:	4a20      	ldr	r2, [pc, #128]	; (80004c8 <secondDisplay+0xf8>)
 8000448:	6952      	ldr	r2, [r2, #20]
 800044a:	2108      	movs	r1, #8
 800044c:	438a      	bics	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_4;
 8000450:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <secondDisplay+0xf8>)
 8000452:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <secondDisplay+0xf8>)
 8000454:	6952      	ldr	r2, [r2, #20]
 8000456:	2110      	movs	r1, #16
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
	delay();
 800045c:	f7ff fedc 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_4);
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <secondDisplay+0xf8>)
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <secondDisplay+0xf8>)
 8000464:	6952      	ldr	r2, [r2, #20]
 8000466:	2110      	movs	r1, #16
 8000468:	438a      	bics	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_5;
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <secondDisplay+0xf8>)
 800046e:	4a16      	ldr	r2, [pc, #88]	; (80004c8 <secondDisplay+0xf8>)
 8000470:	6952      	ldr	r2, [r2, #20]
 8000472:	2120      	movs	r1, #32
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
	delay();
 8000478:	f7ff fece 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_5);
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <secondDisplay+0xf8>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <secondDisplay+0xf8>)
 8000480:	6952      	ldr	r2, [r2, #20]
 8000482:	2120      	movs	r1, #32
 8000484:	438a      	bics	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_6;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <secondDisplay+0xf8>)
 800048a:	4a0f      	ldr	r2, [pc, #60]	; (80004c8 <secondDisplay+0xf8>)
 800048c:	6952      	ldr	r2, [r2, #20]
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
	delay();
 8000494:	f7ff fec0 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_6);
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <secondDisplay+0xf8>)
 800049a:	4a0b      	ldr	r2, [pc, #44]	; (80004c8 <secondDisplay+0xf8>)
 800049c:	6952      	ldr	r2, [r2, #20]
 800049e:	2140      	movs	r1, #64	; 0x40
 80004a0:	438a      	bics	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
	GPIOB->ODR|= GPIO_ODR_7;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <secondDisplay+0xf8>)
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <secondDisplay+0xf8>)
 80004a8:	6952      	ldr	r2, [r2, #20]
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
	delay();
 80004b0:	f7ff feb2 	bl	8000218 <delay>
	GPIOB->ODR &= ~(GPIO_ODR_7);
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <secondDisplay+0xf8>)
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <secondDisplay+0xf8>)
 80004b8:	6952      	ldr	r2, [r2, #20]
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	438a      	bics	r2, r1
 80004be:	615a      	str	r2, [r3, #20]

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	48000400 	.word	0x48000400

080004cc <thirdDisplay>:
void thirdDisplay(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_0|GPIO_ODR_1|GPIO_ODR_2|GPIO_ODR_3|GPIO_ODR_4|GPIO_ODR_5|GPIO_ODR_6|GPIO_ODR_7);
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <thirdDisplay+0x40>)
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <thirdDisplay+0x40>)
 80004d6:	6952      	ldr	r2, [r2, #20]
 80004d8:	21ff      	movs	r1, #255	; 0xff
 80004da:	438a      	bics	r2, r1
 80004dc:	615a      	str	r2, [r3, #20]
	for (uint8_t bit =0b00000000;bit<0b11111111;bit++){
 80004de:	1dfb      	adds	r3, r7, #7
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
 80004e4:	e00a      	b.n	80004fc <thirdDisplay+0x30>
		GPIOB -> ODR = bit;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <thirdDisplay+0x40>)
 80004e8:	1dfa      	adds	r2, r7, #7
 80004ea:	7812      	ldrb	r2, [r2, #0]
 80004ec:	615a      	str	r2, [r3, #20]
		delay();
 80004ee:	f7ff fe93 	bl	8000218 <delay>
	for (uint8_t bit =0b00000000;bit<0b11111111;bit++){
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	3201      	adds	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
 80004fc:	1dfb      	adds	r3, r7, #7
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d1f0      	bne.n	80004e6 <thirdDisplay+0x1a>
	}
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	48000400 	.word	0x48000400

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000514:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000516:	e003      	b.n	8000520 <LoopCopyDataInit>

08000518 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800051a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800051c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800051e:	3104      	adds	r1, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <LoopForever+0xa>)
  ldr r3, =_edata
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <LoopForever+0xe>)
  adds r2, r0, r1
 8000524:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000528:	d3f6      	bcc.n	8000518 <CopyDataInit>
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  b LoopFillZerobss
 800052c:	e002      	b.n	8000534 <LoopFillZerobss>

0800052e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000530:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000532:	3204      	adds	r2, #4

08000534 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <LoopForever+0x16>)
  cmp r2, r3
 8000536:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000538:	d3f9      	bcc.n	800052e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800053a:	f000 f813 	bl	8000564 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 f855 	bl	80005ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fde1 	bl	8000108 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 800054c:	08000654 	.word	0x08000654
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000554:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000558:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800055c:	20000028 	.word	0x20000028

08000560 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_COMP_IRQHandler>
	...

08000564 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <SystemInit+0x70>)
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <SystemInit+0x70>)
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	2101      	movs	r1, #1
 8000570:	430a      	orrs	r2, r1
 8000572:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8000574:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <SystemInit+0x70>)
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <SystemInit+0x70>)
 8000578:	6852      	ldr	r2, [r2, #4]
 800057a:	4917      	ldr	r1, [pc, #92]	; (80005d8 <SystemInit+0x74>)
 800057c:	400a      	ands	r2, r1
 800057e:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <SystemInit+0x70>)
 8000582:	4a14      	ldr	r2, [pc, #80]	; (80005d4 <SystemInit+0x70>)
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	4915      	ldr	r1, [pc, #84]	; (80005dc <SystemInit+0x78>)
 8000588:	400a      	ands	r2, r1
 800058a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <SystemInit+0x70>)
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <SystemInit+0x70>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	4913      	ldr	r1, [pc, #76]	; (80005e0 <SystemInit+0x7c>)
 8000594:	400a      	ands	r2, r1
 8000596:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <SystemInit+0x70>)
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <SystemInit+0x70>)
 800059c:	6852      	ldr	r2, [r2, #4]
 800059e:	4911      	ldr	r1, [pc, #68]	; (80005e4 <SystemInit+0x80>)
 80005a0:	400a      	ands	r2, r1
 80005a2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <SystemInit+0x70>)
 80005a6:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <SystemInit+0x70>)
 80005a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80005aa:	210f      	movs	r1, #15
 80005ac:	438a      	bics	r2, r1
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <SystemInit+0x70>)
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <SystemInit+0x70>)
 80005b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80005b6:	490c      	ldr	r1, [pc, #48]	; (80005e8 <SystemInit+0x84>)
 80005b8:	400a      	ands	r2, r1
 80005ba:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <SystemInit+0x70>)
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <SystemInit+0x70>)
 80005c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80005c2:	2101      	movs	r1, #1
 80005c4:	438a      	bics	r2, r1
 80005c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <SystemInit+0x70>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]

}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000
 80005d8:	f8ffb80c 	.word	0xf8ffb80c
 80005dc:	fef6ffff 	.word	0xfef6ffff
 80005e0:	fffbffff 	.word	0xfffbffff
 80005e4:	ffc0ffff 	.word	0xffc0ffff
 80005e8:	fffffeac 	.word	0xfffffeac

080005ec <__libc_init_array>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	2600      	movs	r6, #0
 80005f0:	4d0c      	ldr	r5, [pc, #48]	; (8000624 <__libc_init_array+0x38>)
 80005f2:	4c0d      	ldr	r4, [pc, #52]	; (8000628 <__libc_init_array+0x3c>)
 80005f4:	1b64      	subs	r4, r4, r5
 80005f6:	10a4      	asrs	r4, r4, #2
 80005f8:	42a6      	cmp	r6, r4
 80005fa:	d109      	bne.n	8000610 <__libc_init_array+0x24>
 80005fc:	2600      	movs	r6, #0
 80005fe:	f000 f819 	bl	8000634 <_init>
 8000602:	4d0a      	ldr	r5, [pc, #40]	; (800062c <__libc_init_array+0x40>)
 8000604:	4c0a      	ldr	r4, [pc, #40]	; (8000630 <__libc_init_array+0x44>)
 8000606:	1b64      	subs	r4, r4, r5
 8000608:	10a4      	asrs	r4, r4, #2
 800060a:	42a6      	cmp	r6, r4
 800060c:	d105      	bne.n	800061a <__libc_init_array+0x2e>
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	00b3      	lsls	r3, r6, #2
 8000612:	58eb      	ldr	r3, [r5, r3]
 8000614:	4798      	blx	r3
 8000616:	3601      	adds	r6, #1
 8000618:	e7ee      	b.n	80005f8 <__libc_init_array+0xc>
 800061a:	00b3      	lsls	r3, r6, #2
 800061c:	58eb      	ldr	r3, [r5, r3]
 800061e:	4798      	blx	r3
 8000620:	3601      	adds	r6, #1
 8000622:	e7f2      	b.n	800060a <__libc_init_array+0x1e>
 8000624:	0800064c 	.word	0x0800064c
 8000628:	0800064c 	.word	0x0800064c
 800062c:	0800064c 	.word	0x0800064c
 8000630:	08000650 	.word	0x08000650

08000634 <_init>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063a:	bc08      	pop	{r3}
 800063c:	469e      	mov	lr, r3
 800063e:	4770      	bx	lr

08000640 <_fini>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr
